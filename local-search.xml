<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>cs144-lab0~lab7</title>
    <link href="/2023/08/12/cs144-lab0-lab7/"/>
    <url>/2023/08/12/cs144-lab0-lab7/</url>
    
    <content type="html"><![CDATA[<p>lab0-lab5 code：<a href="https://github.com/MadFrey/minnow">MadFrey&#x2F;minnow (github.com)</a></p><p>lab6和lab7自行测试</p><p>历时大概两个星期，八月中旬到八月底，期间还有段时间没花在这上面</p><p>整体感觉下来lab1和lab3难度较高，其他的根据pdf的描述再加上自己去了解一下原理，都不难写</p><h2 id="lab-0"><a href="#lab-0" class="headerlink" title="lab 0"></a>lab 0</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@hecs-271160 ~]# telnet cs144.keithw.org http<br>Trying 104.196.238.229...<br>Connected to cs144.keithw.org.<br>Escape character is &#x27;^]&#x27;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">telnet&gt; </span><span class="language-bash"></span><br><span class="language-bash">GET /hello HTTP/1.1</span><br>Host: cs144.keithw.org<br><br>HTTP/1.1 200 OK<br>Date: Sat, 12 Aug 2023 15:07:45 GMT<br>Server: Apache<br>Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT<br>ETag: &quot;e-57ce93446cb64&quot;<br>Accept-Ranges: bytes<br>Content-Length: 14<br>Content-Type: text/plain<br><br>Hello, CS144!<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hecs-271160 ~]# telnet cs144.keithw.org http<br>Trying 104.196.238.229...<br>Connected to cs144.keithw.org.<br>Escape character is &#x27;^]&#x27;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">telnet&gt; </span><span class="language-bash"></span><br><span class="language-bash">GET /lab0/MadFrey HTTP/1.1</span>    <br>Host: cs144.keithw.org<br><br>HTTP/1.1 200 OK<br>Date: Sat, 12 Aug 2023 15:13:12 GMT<br>Server: Apache<br>X-You-Said-Your-SunetID-Was: MadFrey<br>X-Your-Code-Is: 794944<br>Content-length: 111<br>Vary: Accept-Encoding<br>Content-Type: text/plain<br><br>Hello! You told us that your SUNet ID was &quot;MadFrey&quot;. Please see the HTTP headers (above) for your secret code.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hecs-271160 etc]# telnet localhost 9090<br>Trying ::1...<br>telnet: connect to address ::1: Connection refused<br>Trying 127.0.0.1...<br>Connected to localhost.<br>Escape character is &#x27;^]&#x27;.<br>11111<br>3243435<br>MadFrey <br>^CConnection closed by foreign host.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hecs-271160 netcat-0.7.1]# netcat -u 127.0.0.1 8004<br>^C[root@hecs-271160 netcat-0.7.1]# netcat -v -l -p 9090<br>Connection from 127.0.0.1:34572<br>11111<br>3243435<br>MadFrey<br>Exiting.<br>[root@hecs-271160 netcat-0.7.1]# <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_URL</span><span class="hljs-params">( <span class="hljs-type">const</span> string&amp; host, <span class="hljs-type">const</span> string&amp; path )</span></span><br><span class="hljs-function"></span>&#123;<br>  TCPSocket socket;<br>  socket.<span class="hljs-built_in">connect</span>( <span class="hljs-built_in">Address</span>( host, <span class="hljs-string">&quot;http&quot;</span> ) );<br>  socket.<span class="hljs-built_in">write</span>( <span class="hljs-string">&quot;GET &quot;</span> + path + <span class="hljs-string">&quot; HTTP/1.1\r\nHost: &quot;</span> + host + <span class="hljs-string">&quot;\r\nConnection: close\r\n\r\n&quot;</span> );<br><br>  <span class="hljs-keyword">while</span> ( !socket.<span class="hljs-built_in">eof</span>() ) &#123;<br>    std::string buffers;<br>    socket.<span class="hljs-built_in">read</span>( buffers );<br>    cout &lt;&lt; buffers;<br>  &#125;<br>  socket.<span class="hljs-built_in">close</span>();<br>  cerr &lt;&lt; <span class="hljs-string">&quot;Function called: get_URL(&quot;</span> &lt;&lt; host &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;)\n&quot;</span>;<br>  cerr &lt;&lt; <span class="hljs-string">&quot;Warning: get_URL() has not been implemented yet.\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lib0.assets\image-20230815092006970.png" alt="image-20230815092006970"></p><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lib0.assets\image-20230815181250757.png" alt="image-20230815181250757"></p><h2 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h2><p>自己先用优先队列写了一遍，发现代码过于复杂，并且时间复杂度太高了，测试点超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;reassembler.hh&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reassembler::is_closed</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> closed_ &amp;&amp; <span class="hljs-built_in">bytes_pending</span>() == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reassembler::insert</span><span class="hljs-params">( <span class="hljs-type">uint64_t</span> first_index, string data, <span class="hljs-type">bool</span> is_last_substring, Writer&amp; output )</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// Your code here.</span><br>  <span class="hljs-keyword">if</span> ( is_last_substring ) &#123;<br>    closed_ = <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// important!</span><br>  <span class="hljs-keyword">if</span> ( first_index &gt;= unassembled_index + output.<span class="hljs-built_in">available_capacity</span>() || <span class="hljs-comment">/* Out of bound */</span><br>       first_index + data.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span> &lt; unassembled_index ||            <span class="hljs-comment">/* Data have been transferred */</span><br>       data.<span class="hljs-built_in">empty</span>() || output.<span class="hljs-built_in">available_capacity</span>() == <span class="hljs-number">0</span> ) &#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">is_closed</span>() ) &#123;<br>      output.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ( first_index &lt; unassembled_index ) &#123;<br>    <span class="hljs-comment">// overlap</span><br>    <span class="hljs-keyword">if</span> ( first_index + data.<span class="hljs-built_in">size</span>() &gt; unassembled_index ) &#123;<br>      <span class="hljs-comment">// overlap</span><br>      <span class="hljs-type">size_t</span> overlap = unassembled_index - first_index;<br>      <span class="hljs-type">size_t</span> new_data_size = data.<span class="hljs-built_in">size</span>() - overlap;<br>      string new_data = data.<span class="hljs-built_in">substr</span>( overlap, new_data_size );<br>      output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">push</span>( new_data );<br>      unassembled_index += new_data_size;<br>    &#125;<br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( first_index == unassembled_index ) &#123;<br>    <span class="hljs-comment">// no overlap, 要进行cap比较</span><br>    <span class="hljs-type">uint64_t</span> cap = output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">available_capacity</span>();<br>    <span class="hljs-keyword">if</span> ( data.<span class="hljs-built_in">size</span>() &gt; cap ) &#123;<br>      <span class="hljs-comment">// cap不够</span><br>      <span class="hljs-type">size_t</span> new_data_size = cap;<br>      string new_data = data.<span class="hljs-built_in">substr</span>( <span class="hljs-number">0</span>, new_data_size );<br>      output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">push</span>( new_data );<br>      unassembled_index += new_data_size;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// cap够</span><br>      output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">push</span>( data );<br>      unassembled_index += data.<span class="hljs-built_in">size</span>();<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 使用priority queue来存储碎片</span><br>    <span class="hljs-keyword">if</span> ( q.<span class="hljs-built_in">empty</span>() ) &#123;<br>      q.<span class="hljs-built_in">push</span>( <span class="hljs-built_in">make_pair</span>( first_index, data ) );<br>      unassembled_bytes_ += data.<span class="hljs-built_in">size</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        &#125;<br><br>    <span class="hljs-keyword">while</span> ( !q.<span class="hljs-built_in">empty</span>() ) &#123;<br>      <span class="hljs-type">uint64_t</span> new_index = q.<span class="hljs-built_in">top</span>().first;<br>      std::string new_data = q.<span class="hljs-built_in">top</span>().second;<br>      q.<span class="hljs-built_in">pop</span>();<br>      unassembled_bytes_ -= new_data.<span class="hljs-built_in">size</span>();<br>      <span class="hljs-keyword">if</span> ( q.<span class="hljs-built_in">empty</span>() ) &#123;<br>        q.<span class="hljs-built_in">push</span>( <span class="hljs-built_in">make_pair</span>( new_index, new_data ) );<br>        unassembled_bytes_ += new_data.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">uint64_t</span> new_index2 = q.<span class="hljs-built_in">top</span>().first;<br>        std::string new_data2 = q.<span class="hljs-built_in">top</span>().second;<br>        <span class="hljs-keyword">if</span> ( new_index &lt;= new_index2 ) &#123;<br>          <span class="hljs-type">size_t</span> overlap = new_index + new_data.<span class="hljs-built_in">size</span>() - new_index2;<br>          <span class="hljs-keyword">if</span> ( overlap &gt;= new_data.<span class="hljs-built_in">size</span>() ) &#123;<br>            q.<span class="hljs-built_in">pop</span>();<br>            unassembled_bytes_ -= new_data2.<span class="hljs-built_in">size</span>();<br>            q.<span class="hljs-built_in">push</span>( <span class="hljs-built_in">make_pair</span>( new_index, new_data ) );<br>            unassembled_bytes_ += new_data.<span class="hljs-built_in">size</span>();<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// overlap</span><br>            std::string substr = new_data.<span class="hljs-built_in">substr</span>( <span class="hljs-number">0</span>, new_index2 - new_index )<br>                                 + new_data2.<span class="hljs-built_in">substr</span>( overlap, new_data2.<span class="hljs-built_in">size</span>() - overlap );<br>            q.<span class="hljs-built_in">pop</span>();<br>            unassembled_bytes_ -= new_data2.<span class="hljs-built_in">size</span>();<br>            q.<span class="hljs-built_in">push</span>( <span class="hljs-built_in">make_pair</span>( first_index, substr ) );<br>            unassembled_bytes_ += substr.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 循环</span><br>  <span class="hljs-keyword">while</span> ( !q.<span class="hljs-built_in">empty</span>() ) &#123;<br>    <span class="hljs-type">uint64_t</span> new_index = q.<span class="hljs-built_in">top</span>().first;<br>    std::string new_data = q.<span class="hljs-built_in">top</span>().second;<br>    <span class="hljs-type">uint64_t</span> cap = output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">available_capacity</span>();<br>    <span class="hljs-keyword">if</span> ( new_index &lt;= unassembled_index ) &#123;<br>      <span class="hljs-comment">// overlap</span><br>      <span class="hljs-keyword">if</span> ( new_index + new_data.<span class="hljs-built_in">size</span>() &gt; unassembled_index ) &#123;<br>        <span class="hljs-comment">// overlap</span><br>        <span class="hljs-type">size_t</span> overlap = unassembled_index - new_index;<br>        <span class="hljs-type">size_t</span> new_data_size = <span class="hljs-built_in">min</span>( new_data.<span class="hljs-built_in">size</span>() - overlap, cap );<br>        string new_data_2 = new_data.<span class="hljs-built_in">substr</span>( overlap, new_data_size );<br>        output.<span class="hljs-built_in">writer</span>().<span class="hljs-built_in">push</span>( new_data_2 );<br>        unassembled_index += new_data_size;<br>        unassembled_bytes_ -= data.<span class="hljs-built_in">size</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// no overlap</span><br>        q.<span class="hljs-built_in">pop</span>();<br>        unassembled_bytes_ -= new_data.<span class="hljs-built_in">size</span>();<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( new_index &gt; unassembled_index ) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">is_closed</span>() ) &#123; <span class="hljs-comment">// important!</span><br>    output.<span class="hljs-built_in">close</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">uint64_t</span> <span class="hljs-title">Reassembler::bytes_pending</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// Your code here.</span><br>  <span class="hljs-keyword">return</span> unassembled_bytes_;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>改用map后第14个测试点超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;reassembler.hh&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reassembler::is_closed</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> closed_ &amp;&amp; <span class="hljs-built_in">bytes_pending</span>() == <span class="hljs-number">0</span>; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reassembler::insert</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> first_index, string data, <span class="hljs-type">bool</span> is_last_substring, Writer &amp;output)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (is_last_substring) &#123;<br>        closed_ = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Remember index_ points to where the current byte located at.</span><br>    <span class="hljs-comment">// 1. Unacceptable index: first_index overwhelms the capability range.</span><br>    <span class="hljs-comment">// 2. All overlapped: The end index of the substring is smaller than current index_.</span><br>    <span class="hljs-comment">// 3. data is empty.</span><br>    <span class="hljs-comment">// 4. No available space.</span><br>    <span class="hljs-keyword">if</span> (first_index &gt;= unassembled_index_ + output.<span class="hljs-built_in">available_capacity</span>() || <span class="hljs-comment">/* Out of bound */</span><br>        first_index + data.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span> &lt; unassembled_index_ ||            <span class="hljs-comment">/* Data have been transferred */</span><br>        data.<span class="hljs-built_in">empty</span>() || output.<span class="hljs-built_in">available_capacity</span>() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_closed</span>()) &#123;<br>            output.<span class="hljs-built_in">close</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> cap = output.<span class="hljs-built_in">available_capacity</span>();<br>    <span class="hljs-comment">// new_index actually distinguish where the current data start, the start index</span><br>    <span class="hljs-type">uint64_t</span> new_index = first_index;<br><br>    <span class="hljs-comment">// Data needs to fit the capability limitation</span><br>    <span class="hljs-keyword">if</span> (first_index &lt;= unassembled_index_) &#123;<br>        new_index = unassembled_index_;<br>        <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> overlapped_length = unassembled_index_ - first_index;<br>        data = data.<span class="hljs-built_in">substr</span>(overlapped_length, <span class="hljs-built_in">min</span>(data.<span class="hljs-built_in">size</span>() - overlapped_length, cap));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        data = data.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">min</span>(data.<span class="hljs-built_in">size</span>(), cap));<br>        <span class="hljs-keyword">if</span> (first_index + data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &gt; unassembled_index_ + cap - <span class="hljs-number">1</span>) &#123;<br>            data = data.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, unassembled_index_ + cap - first_index);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Get the rear substring and merge the overlapped part</span><br>    <span class="hljs-keyword">auto</span> rear_iter = unassembled_substrings_.<span class="hljs-built_in">lower_bound</span>(new_index);<br>    <span class="hljs-keyword">while</span> (rear_iter != unassembled_substrings_.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> &amp;[rear_index, rear_data] = *rear_iter;<br>        <span class="hljs-keyword">if</span> (new_index + data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &lt; rear_index) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-comment">// No overlap conflict</span><br>        <span class="hljs-type">uint64_t</span> rear_overlapped_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (new_index + data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &lt; rear_index + rear_data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>            rear_overlapped_length = new_index + data.<span class="hljs-built_in">size</span>() - rear_index;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            rear_overlapped_length = rear_data.<span class="hljs-built_in">size</span>();<br>        &#125;<br>        <span class="hljs-comment">// Prepare for next rear early, because the data may be erased afterwards.</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> next_rear = rear_index + rear_data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (rear_overlapped_length == rear_data.<span class="hljs-built_in">size</span>()) &#123;<br>            unassembled_bytes_ -= rear_data.<span class="hljs-built_in">size</span>();<br>            unassembled_substrings_.<span class="hljs-built_in">erase</span>(rear_index);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// We don&#x27;t combine current data and rear data.</span><br>            <span class="hljs-comment">// Erase the overlapped part in current data is more efficient.</span><br>            data.<span class="hljs-built_in">erase</span>(data.<span class="hljs-built_in">end</span>() - <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int64_t</span>&gt;(rear_overlapped_length), data.<span class="hljs-built_in">end</span>());<br>        &#125;<br>        rear_iter = unassembled_substrings_.<span class="hljs-built_in">lower_bound</span>(next_rear);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (first_index &gt; unassembled_index_) &#123;<br>        <span class="hljs-keyword">auto</span> front_iter = unassembled_substrings_.<span class="hljs-built_in">upper_bound</span>(new_index);<br>        <span class="hljs-keyword">if</span> (front_iter != unassembled_substrings_.<span class="hljs-built_in">begin</span>()) &#123;<br>            front_iter--;<br>            <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;[front_index, front_data] = *front_iter;<br>            <span class="hljs-keyword">if</span> (front_index + front_data.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &gt;= first_index) &#123;<br>                <span class="hljs-type">uint64_t</span> overlapped_length = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (front_index + front_data.<span class="hljs-built_in">size</span>() &lt;= first_index + data.<span class="hljs-built_in">size</span>()) &#123;<br>                    overlapped_length = front_index + front_data.<span class="hljs-built_in">size</span>() - first_index;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    overlapped_length = data.<span class="hljs-built_in">size</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (overlapped_length == front_data.<span class="hljs-built_in">size</span>()) &#123;<br>                    unassembled_bytes_ -= front_data.<span class="hljs-built_in">size</span>();<br>                    unassembled_substrings_.<span class="hljs-built_in">erase</span>(front_index);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    data.<span class="hljs-built_in">erase</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">begin</span>() + <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int64_t</span>&gt;(overlapped_length));<br>                    <span class="hljs-comment">// Don&#x27;t forget to update the inserted location</span><br>                    new_index = first_index + overlapped_length;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// If the processed data is empty, no need to insert it.</span><br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>        unassembled_bytes_ += data.<span class="hljs-built_in">size</span>();<br>        unassembled_substrings_.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(new_index, std::<span class="hljs-built_in">move</span>(data)));<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = unassembled_substrings_.<span class="hljs-built_in">begin</span>(); iter != unassembled_substrings_.<span class="hljs-built_in">end</span>(); <span class="hljs-comment">/* nop */</span>) &#123;<br>        <span class="hljs-keyword">auto</span> &amp;[sub_index, sub_data] = *iter;<br>        <span class="hljs-keyword">if</span> (sub_index == unassembled_index_) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> prev_bytes_pushed = output.<span class="hljs-built_in">bytes_pushed</span>();<br>            output.<span class="hljs-built_in">push</span>(sub_data);<br>            <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> bytes_pushed = output.<span class="hljs-built_in">bytes_pushed</span>();<br>            <span class="hljs-keyword">if</span> (bytes_pushed != prev_bytes_pushed + sub_data.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-comment">// Cannot push all data, we need to reserve the un-pushed part.</span><br>                <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> pushed_length = bytes_pushed - prev_bytes_pushed;<br>                unassembled_index_ += pushed_length;<br>                unassembled_bytes_ -= pushed_length;<br>                unassembled_substrings_.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(unassembled_index_, sub_data.<span class="hljs-built_in">substr</span>(pushed_length)));<br>                <span class="hljs-comment">// Don&#x27;t forget to remove the previous incompletely transferred data</span><br>                unassembled_substrings_.<span class="hljs-built_in">erase</span>(sub_index);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            unassembled_index_ += sub_data.<span class="hljs-built_in">size</span>();<br>            unassembled_bytes_ -= sub_data.<span class="hljs-built_in">size</span>();<br>            unassembled_substrings_.<span class="hljs-built_in">erase</span>(sub_index);<br>            iter = unassembled_substrings_.<span class="hljs-built_in">find</span>(unassembled_index_);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">// No need to do more. Data has been discontinuous.</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_closed</span>()) &#123;<br>        output.<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">uint64_t</span> <span class="hljs-title">Reassembler::bytes_pending</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> unassembled_bytes_; &#125;<br></code></pre></td></tr></table></figure><p>最后还是直接参考了大佬的代码，因为花在lab1上的时间太久了</p><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lab0-lab7.assets\image-20230819181925740.png" alt="image-20230819181925740"></p><h2 id="lab2"><a href="#lab2" class="headerlink" title="lab2"></a>lab2</h2><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lab0-lab7.assets\image-20230819181854325.png" alt="image-20230819181854325"></p><h2 id="lab3"><a href="#lab3" class="headerlink" title="lab3"></a>lab3</h2><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lab0-lab7.assets\image-20230827203700808.png" alt="image-20230827203700808"></p><h2 id="lab4"><a href="#lab4" class="headerlink" title="lab4"></a>lab4</h2><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lab0-lab7.assets\image-20230830223804712.png" alt="image-20230830223804712"></p><h2 id="lab5"><a href="#lab5" class="headerlink" title="lab5"></a>lab5</h2><p><img src="D:\blogs\hexo-blog\source_posts\cs144-lab0-lab7.assets\image-20230901111001853.png" alt="image-20230901111001853"></p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs144</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新建站后的第一篇博客</title>
    <link href="/2023/07/29/%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%99%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/07/29/%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%99%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>​这已经是第二次搭建博客了，距离上一次搭建自己的博客已经有一年多了。之前在大一的时候用的typecho在自己服务器上搭的，主要也是记录的一些算法相关的东西。由于各种因素影响，最后还是放弃了之前的博客，选择重新搭建。</p><p>​这次搭博客，主要还是想要记录一下个人觉得比较有意思的事，发表发表观点，其次是技术方面会写一些有技术深度和广度的博客，做CSDN,掘金搬运工就太没意思了。（这也是放弃之前的博客的原因之一吧）然后写写大学阶段的年度总结吧。总之，写博客是我对于自己所学内容的一种内容输出，也是这次想要重新搭建博客的主要原因。</p><p>​只能说写博客确实挺费时间的，想要坚持一直下去确实有一定难度，但时间挤一挤还是会有的。嗯，大概就这些吧。</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
